{
  "version": 3,
  "sources": ["../../node_modules/maximez_dropdown/src/Dropdown.jsx", "../../node_modules/maximez_dropdown/src/icons/DropdownArrow.jsx", "../../node_modules/maximez_dropdown/src/SeparatedBox.jsx", "../../node_modules/maximez_dropdown/src/icons/MagnifyingGlass.jsx", "../../node_modules/maximez_dropdown/src/scripts.js", "../../node_modules/maximez_dropdown/src/ListItem.jsx", "../../node_modules/maximez_dropdown/src/NormalBox.jsx"],
  "sourcesContent": ["import React, { useRef, useState, useEffect } from 'react';\r\nimport classes from './styles/Dropdown.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport DropdownArrow from './icons/DropdownArrow';\r\nimport SeparatedBox from './SeparatedBox';\r\nimport NormalBox from './NormalBox';\r\n\r\n/**\r\n * Composant Dropdown pour la sélection d'éléments dans une liste déroulante personnalisée. \r\n * On peut choisir le type de liste déroulante.\r\n *\r\n * @component\r\n * @param {Object} props - Les propriétés du composant.\r\n * @param {Array} props.list - La liste des éléments à afficher dans la liste déroulante.\r\n * @param {string} props.label - L'étiquette associée à la liste déroulante.\r\n * @param {string} props.name - Le nom de la liste déroulante.\r\n * @param {string} [props.errorMsg] - Message d'erreur à afficher en cas de problème.\r\n * @param {boolean} [props.separatedBox] - Indique si la liste déroulante utilise une boîte séparée pour les options.\r\n * @param {boolean} [props.searchBar] - Indique si une barre de recherche est affichée pour filtrer les options.\r\n * @param {string} [props.defaultValue] - La valeur par défaut sélectionnée.\r\n * @param {string} [props.defaultName] - Le nom par défaut sélectionné.\r\n * @param {function} [props.onChange] - Fonction de rappel appelée lorsque la sélection change.\r\n * @param {number} props.height - La hauteur de la liste déroulante.\r\n * @param {number} [props.maxWidth] - La largeur maximale de la liste déroulante.\r\n * @param {string} [props.labelColor] - Couleur du texte de l'étiquette.\r\n * @param {string} [props.focusedLabelColor] - Couleur du texte de l'étiquette lorsque la liste est ouverte ou une valeur est sélectionnée.\r\n * @param {string} [props.backgroundColor] - Couleur de fond de la liste déroulante.\r\n * @param {string} [props.hoveredBackgroundColor] - Couleur de fond lorsqu'un élément est survolé.\r\n * @param {string} [props.fontColor] - Couleur du texte dans la liste déroulante.\r\n * @param {string} [props.hoveredFontColor] - Couleur du texte lorsque l'élément est survolé.\r\n * @param {string} [props.fontFamily] - Police de caractères à utiliser pour le texte.\r\n * @param {string} [props.borderBottomColor] - Couleur de la bordure inférieure de la liste déroulante.\r\n * @param {string} [props.boxShadowColor] - Couleur de l'ombre de la liste déroulante.\r\n * @returns {JSX.Element} Le composant Dropdown rendu.\r\n */\r\n\r\n\r\nfunction Dropdown({ list, label, name, errorMsg, separatedBox, searchBar, defaultValue, defaultName, onChange, height, maxWidth, labelColor, focusedLabelColor, backgroundColor, hoveredBackgroundColor, fontColor, hoveredFontColor, fontFamily, borderBottomColor, boxShadowColor}) {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [dropdownStatus, setDropdownStatus] = useState('closed')\r\n    const [selectedName, setSelectedName] = defaultName ? useState(defaultName) : useState(defaultValue ? defaultValue : '');\r\n    const [selectedValue, setSelectedValue] = defaultValue ? useState(defaultValue) : useState('');\r\n    const dropdownMenu = useRef(null);\r\n\r\n    // Pour que le dropdown se ferme lorsque l'utilisateur clique en dehors\r\n    // document.addEventListener('click', handleClickOutside);\r\n    function handleClickOutside(event) {\r\n        if (isOpen && dropdownMenu.current && !dropdownMenu.current.contains(event.target)) {\r\n            if (dropdownStatus === `opened`) {\r\n                handleClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside);\r\n        };\r\n    }, [isOpen, dropdownStatus]);\r\n\r\n    // Pour le cas ou on souhaite utiliser le dropdown sur un \"onChange\"\r\n    // plutot qu'au submit du formulaire\r\n    useEffect(() => {\r\n        onChange && onChange(selectedValue);\r\n    }, [selectedValue]);\r\n\r\n    // Fonction pour gérer le clique sur une des options\r\n    function handleClick(name, value) {\r\n        setSelectedName(name);\r\n        if (value) {\r\n            setSelectedValue(value);\r\n        } else if (!value) {\r\n            setSelectedValue(name);\r\n        }\r\n        handleClose();\r\n    }\r\n\r\n    function handleClose() {\r\n        setDropdownStatus(`closing`);\r\n        setIsOpen(false);\r\n        setTimeout(() => {\r\n            setDropdownStatus(`closed`);\r\n        }, 300)\r\n    }\r\n\r\n    function handleOpen() {\r\n        setDropdownStatus(`opening`);\r\n        setIsOpen(true);\r\n        setTimeout(() => {\r\n            setDropdownStatus(`opened`);\r\n        }, 300)\r\n    }\r\n    return (\r\n        <div className={`${classes.component_container} ${classes[dropdownStatus]}`}\r\n            style={{ maxWidth: `${maxWidth}px` }}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}>\r\n            <label className={(isOpen || selectedName !== '') ? `${classes.label} ${classes.focused}` : classes.label}\r\n                htmlFor={name}\r\n                style={{color: (isOpen || selectedName !== '') ? focusedLabelColor : labelColor}}\r\n            >\r\n                {label}\r\n            </label>\r\n            <input className={classes.hidden} name={name} id={name} value={selectedValue} readOnly={true} />\r\n            <div style={{ height: `${height}px` }}>\r\n                <div ref={dropdownMenu}\r\n                    className={separatedBox ? `${classes.dropdown_container} ${classes.separated}` : `${classes.dropdown_container} ${classes.normal}`}\r\n                    style={{\r\n                        height: !separatedBox ? ((dropdownStatus === `closed`) || (dropdownStatus === `closing`)) ? `${height}px` : `${height * 8}px` : `${height}px`,\r\n                        boxShadow: `0 1px 0 0 ${borderBottomColor}`\r\n                    }}>\r\n                    <div className={classes.dropdown_header} style={{ minHeight: `${height}px` }} onClick={() => isOpen ? handleClose() : handleOpen()}>\r\n                        <span className={classes.selected_item}\r\n                            style={{ color: fontColor && fontColor }}>{selectedName}</span>\r\n                        <span className={classes.dropdown_header_icon} style={{ backgroundColor: ((isHovered || isOpen) && hoveredBackgroundColor) && hoveredBackgroundColor }}>\r\n                            <DropdownArrow transform={isOpen ? 'rotate(180deg)' : ''}\r\n                                color={fontColor} />\r\n                        </span>\r\n                    </div>\r\n                    {(separatedBox && isOpen) ?\r\n                        <SeparatedBox list={list}\r\n                            height={height}\r\n                            backgroundColor={backgroundColor}\r\n                            hoveredBackgroundColor={hoveredBackgroundColor}\r\n                            fontColor={fontColor}\r\n                            hoveredFontColor={hoveredFontColor}\r\n                            fontFamily={fontFamily}\r\n                            boxShadowColor={boxShadowColor}\r\n                            handleClick={handleClick}\r\n                            searchBar={searchBar} /> : null}\r\n                    {!separatedBox ?\r\n                        <NormalBox list={list}\r\n                            height={height}\r\n                            backgroundColor={backgroundColor}\r\n                            hoveredBackgroundColor={hoveredBackgroundColor}\r\n                            fontColor={fontColor}\r\n                            hoveredFontColor={hoveredFontColor}\r\n                            handleClick={handleClick}\r\n                            searchBar={searchBar} /> : null}\r\n                </div>\r\n            </div>\r\n            {errorMsg ? <p className={classes.error_msg}>{errorMsg}</p> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nDropdown.propTypes = {\r\n    list: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n            PropTypes.shape({\r\n                name: PropTypes.string.isRequired,\r\n                abbreviation: PropTypes.string,\r\n            }),\r\n            PropTypes.number,\r\n            PropTypes.string,\r\n        ])\r\n    ).isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    errorMsg: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    height: PropTypes.number.isRequired,\r\n    maxWidth: PropTypes.number,\r\n    labelColor: PropTypes.string,\r\n    focusedLabelColor: PropTypes.string,\r\n    backgroundColor: PropTypes.string,\r\n    hoveredBackgroundColor: PropTypes.string,\r\n    fontColor: PropTypes.string,\r\n    hoveredFontColor: PropTypes.string,\r\n    fontFamily: PropTypes.string,\r\n    borderBottomColor: PropTypes.string,\r\n    boxShadowColor: PropTypes.string,\r\n    separatedBox: PropTypes.bool.isRequired,\r\n    searchBar: PropTypes.bool,\r\n    defaultValue: PropTypes.oneOfType([\r\n        PropTypes.number,\r\n        PropTypes.string,\r\n    ]),\r\n    defaultName: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n}\r\n\r\nexport default Dropdown;", "import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction DropdownArrow({ transform, color, }) {\r\n    return (\r\n        <svg fill={color} xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 129 129\" enableBackground=\"new 0 0 129 129\" style={{transform: transform, transition: \"transform 0.7s ease\"}}>\r\n            <g>\r\n                <path d=\"m121.3,34.6c-1.6-1.6-4.2-1.6-5.8,0l-51,51.1-51.1-51.1c-1.6-1.6-4.2-1.6-5.8,0-1.6,1.6-1.6,4.2 0,5.8l53.9,53.9c0.8,0.8 1.8,1.2 2.9,1.2 1,0 2.1-0.4 2.9-1.2l53.9-53.9c1.7-1.6 1.7-4.2 0.1-5.8z\" />\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nDropdownArrow.propTypes = {\r\n    transform: PropTypes.string,\r\n    color: PropTypes.string,\r\n}\r\n\r\nexport default DropdownArrow;\r\n", "import React, { useState } from 'react';\r\nimport classes from './styles/SeparatedBox.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport MagnifyingGlass from './icons/MagnifyingGlass';\r\nimport { dropdownFilter } from './scripts';\r\nimport ListItem from './ListItem';\r\n\r\n/**\r\n * Composant SeparatedBox pour afficher les options d'une liste déroulante avec un input pour la recherche.\r\n *\r\n * @component\r\n * @param {Object} props - Les propriétés du composant.\r\n * @param {Array} props.list - La liste des éléments à afficher dans la boîte.\r\n * @param {number} props.height - La hauteur de la boîte.\r\n * @param {string} [props.backgroundColor] - Couleur de fond de la boîte.\r\n * @param {string} [props.hoveredBackgroundColor] - Couleur de fond lorsqu'un élément est survolé.\r\n * @param {string} [props.fontColor] - Couleur du texte dans la boîte.\r\n * @param {string} [props.hoveredFontColor] - Couleur du texte lorsque l'élément est survolé.\r\n * @param {string} [props.fontFamily] - Police de caractères à utiliser pour le texte.\r\n * @param {function} props.handleClick - Fonction de rappel appelée lorsque l'utilisateur clique sur un élément.\r\n * @param {boolean} [props.searchBar] - Indique si une barre de recherche est affichée pour filtrer les options.\r\n * @returns {JSX.Element} Le composant SeparatedBox rendu.\r\n */\r\n\r\n\r\nfunction SeparatedBox({ list, height, backgroundColor, hoveredBackgroundColor, fontColor, hoveredFontColor, fontFamily, handleClick, searchBar }) {\r\n\r\n    const [newList, setNewList] = useState(list);\r\n\r\n    // Fonction pour filtrer les options en fonction de l'input\r\n    function handleFilter(event) {\r\n        const keywords = event.target.value.split(/[, ]+/).filter(item => item !== '');\r\n        const updatedList = dropdownFilter(keywords, list);\r\n        setNewList(updatedList);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dropdown_content}\r\n            style={{ maxHeight: `${height * 7}px`, transform: `translateY(${height + 2}px)`, right: '0' }}>\r\n            <div className={classes.animation_box}\r\n                style={{\r\n                    width: '100%',\r\n                    backgroundColor: backgroundColor\r\n                }}>\r\n                {searchBar === true ?\r\n                    <div className={classes.filter_items} style={{ minHeight: `${height}px`, backgroundColor: hoveredBackgroundColor && hoveredBackgroundColor }}>\r\n                        <span className={classes.filter_items_icon}>\r\n                            <MagnifyingGlass />\r\n                        </span>\r\n                        <input name='search_field' \r\n                        style={{\r\n                            color: fontColor,\r\n                        }}\r\n                        className={classes.filter_items_input} \r\n                        type='text' \r\n                        placeholder='Search...' \r\n                        onChange={handleFilter} />\r\n                    </div> : null}\r\n                <div className={classes.dropdown_options}\r\n                    style={{\r\n                        maxHeight: `${height * 6}px`,\r\n                        backgroundColor: backgroundColor\r\n                    }}>\r\n                    {newList.map((item, index) => {\r\n                        return <ListItem key={item.name ? item.name : index}\r\n                            item={item}\r\n                            index={index}\r\n                            height={height}\r\n                            backgroundColor={backgroundColor}\r\n                            hoveredBackgroundColor={hoveredBackgroundColor}\r\n                            fontColor={fontColor}\r\n                            hoveredFontColor={hoveredFontColor}\r\n                            fontFamily={fontFamily}\r\n                            handleClick={handleClick} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSeparatedBox.propTypes = {\r\n    list: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n            PropTypes.shape({\r\n                name: PropTypes.string.isRequired,\r\n                abbreviation: PropTypes.string,\r\n            }),\r\n            PropTypes.number,\r\n            PropTypes.string,\r\n        ])\r\n    ).isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    backgroundColor: PropTypes.string,\r\n    hoveredBackgroundColor: PropTypes.string,\r\n    fontColor: PropTypes.string,\r\n    hoveredFontColor: PropTypes.string,\r\n    fontFamily: PropTypes.string,\r\n    handleClick: PropTypes.func.isRequired,\r\n    searchBar: PropTypes.bool\r\n}\r\n\r\nexport default SeparatedBox;", "import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction MagnifyingGlass({ color }) {\r\n    return (\r\n        <svg \r\n        xmlns=\"http://www.w3.org/2000/svg\" \r\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\" \r\n        version=\"1.1\" \r\n        id=\"Capa_1\" x=\"0px\" y=\"0px\" \r\n        width=\"475.084px\" \r\n        height=\"475.084px\" \r\n        fill= {color ? color : 'rgb(177,196,108, 0.4)'}\r\n        viewBox=\"0 0 475.084 475.084\" \r\n        enableBackground=\"new 0 0 475.084 475.084\" \r\n        xmlSpace=\"preserve\">\r\n            <g>\r\n                <path d=\"M464.524,412.846l-97.929-97.925c23.6-34.068,35.406-72.047,35.406-113.917c0-27.218-5.284-53.249-15.852-78.087   c-10.561-24.842-24.838-46.254-42.825-64.241c-17.987-17.987-39.396-32.264-64.233-42.826   C254.246,5.285,228.217,0.003,200.999,0.003c-27.216,0-53.247,5.282-78.085,15.847C98.072,26.412,76.66,40.689,58.673,58.676   c-17.989,17.987-32.264,39.403-42.827,64.241C5.282,147.758,0,173.786,0,201.004c0,27.216,5.282,53.238,15.846,78.083   c10.562,24.838,24.838,46.247,42.827,64.234c17.987,17.993,39.403,32.264,64.241,42.832c24.841,10.563,50.869,15.844,78.085,15.844   c41.879,0,79.852-11.807,113.922-35.405l97.929,97.641c6.852,7.231,15.406,10.849,25.693,10.849   c9.897,0,18.467-3.617,25.694-10.849c7.23-7.23,10.848-15.796,10.848-25.693C475.088,428.458,471.567,419.889,464.524,412.846z    M291.363,291.358c-25.029,25.033-55.148,37.549-90.364,37.549c-35.21,0-65.329-12.519-90.36-37.549   c-25.031-25.029-37.546-55.144-37.546-90.36c0-35.21,12.518-65.334,37.546-90.36c25.026-25.032,55.15-37.546,90.36-37.546   c35.212,0,65.331,12.519,90.364,37.546c25.033,25.026,37.548,55.15,37.548,90.36C328.911,236.214,316.392,266.329,291.363,291.358z   \" />\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n            <g>\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nMagnifyingGlass.propTypes = {\r\n    color: PropTypes.string,\r\n}\r\n\r\nexport default MagnifyingGlass;\r\n", "// Fonction qui va filtrer les options du menu de sélection\r\nexport function dropdownFilter(inputKeywords, list) {\r\n    let result = [];\r\n    if(inputKeywords.length === 0){\r\n        return list;\r\n    }\r\n    list.map((item) => {\r\n        let count = 0;\r\n        const array = Object.values(item).toString();\r\n        inputKeywords.map((word) => {\r\n            if (array.toLowerCase().trim().includes(word.toLowerCase().trim())) {\r\n                count++;\r\n            }\r\n            if (count === inputKeywords.length) {\r\n                result.push(item);\r\n            }\r\n        })\r\n    })\r\n    return result;\r\n}", "import React, { useState } from 'react';\r\nimport classes from './styles/ListItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Composant ListItem pour afficher un élément de la liste déroulante.\r\n *\r\n * @component\r\n * @param {Object} props - Les propriétés du composant.\r\n * @param {(Object|string|number)} props.item - L'élément à afficher. Peut être un objet avec des propriétés 'name' et 'abbreviation', une chaîne de caractères ou un nombre.\r\n * @param {number} props.index - L'indice de l'élément dans la liste.\r\n * @param {number} props.height - La hauteur de l'élément de liste.\r\n * @param {string} [props.fontFamily] - La famille de polices à appliquer au texte.\r\n * @param {string} [props.backgroundColor] - La couleur de fond de l'élément.\r\n * @param {string} [props.hoveredBackgroundColor] - La couleur de fond lorsque l'élément est survolé.\r\n * @param {string} [props.fontColor] - La couleur du texte de l'élément.\r\n * @param {string} [props.hoveredFontColor] - La couleur du texte lorsque l'élément est survolé.\r\n * @param {function} props.handleClick - Fonction de rappel appelée lorsque l'utilisateur clique sur l'élément.\r\n * @returns {JSX.Element} Le composant ListItem rendu.\r\n */\r\n\r\n\r\nfunction ListItem({ item, index, height, fontFamily, backgroundColor, hoveredBackgroundColor, fontColor, hoveredFontColor, handleClick }) {\r\n\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    return (\r\n        item.abbreviation ?\r\n            <span key={item.name ? item.name : index}\r\n                className={classes.dropdown_option}\r\n                value={item.abbreviation ? item.abbreviation : item}\r\n                style={{\r\n                    minHeight: `${height}px`, fontFamily: fontFamily && fontFamily,\r\n                    backgroundColor: isHovered ? hoveredBackgroundColor && hoveredBackgroundColor : backgroundColor && backgroundColor,\r\n                    color: isHovered ? hoveredFontColor && hoveredFontColor : fontColor && fontColor\r\n                }}\r\n                onClick={() => handleClick(item.name ? item.name : item, item.abbreviation)}\r\n                onMouseEnter={() => setIsHovered(true)}\r\n                onMouseLeave={() => setIsHovered(false)}\r\n            >\r\n                {item.name ? item.name : item}\r\n            </span> :\r\n            <span key={item.name ? item.name : index}\r\n                className={classes.dropdown_option}\r\n                value={item.name ? item.name : item}\r\n                style={{\r\n                    minHeight: `${height}px`, fontFamily: fontFamily && fontFamily,\r\n                    backgroundColor: isHovered ? hoveredBackgroundColor && hoveredBackgroundColor : backgroundColor && backgroundColor,\r\n                    color: isHovered ? hoveredFontColor && hoveredFontColor : fontColor && fontColor\r\n                }}\r\n                onClick={() => handleClick(item.name ? item.name : item)}\r\n                onMouseEnter={() => setIsHovered(true)}\r\n                onMouseLeave={() => setIsHovered(false)}>\r\n                {item.name ? item.name : item}\r\n            </span>\r\n\r\n    );\r\n}\r\n\r\nListItem.propTypes = {\r\n    item: PropTypes.oneOfType([\r\n        PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            abbreviation: PropTypes.string,\r\n        }),\r\n        PropTypes.string.isRequired,\r\n        PropTypes.number.isRequired,\r\n    ]).isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    fontFamily: PropTypes.string,\r\n    backgroundColor: PropTypes.string,\r\n    hoveredBackgroundColor: PropTypes.string,\r\n    fontColor: PropTypes.string,\r\n    hoveredFontColor: PropTypes.string,\r\n    handleClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ListItem;", "import React, { useState } from 'react';\r\nimport classes from './styles/NormalBox.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport MagnifyingGlass from './icons/MagnifyingGlass';\r\nimport { dropdownFilter } from './scripts'\r\nimport ListItem from './ListItem';\r\n\r\n\r\nfunction NormalBox({ list, height, backgroundColor, hoveredBackgroundColor, fontColor, hoveredFontColor, handleClick, searchBar }) {\r\n\r\n    const [newList, setNewList] = useState(list);\r\n\r\n    // Fonction pour filtrer les options en fonction de l'input\r\n    function handleFilter(event) {\r\n        const keywords = event.target.value.split(/[, ]+/).filter(item => item !== '');\r\n        const updatedList = dropdownFilter(keywords, list);\r\n        setNewList(updatedList);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dropdown_content}\r\n            style={{\r\n                maxHeight: `${height * 7}px`,\r\n                minHeight: `${height * 7}px`,\r\n                backgroundColor: backgroundColor && backgroundColor,\r\n            }}>\r\n            {searchBar === true ?\r\n                <div className={classes.filter_items}\r\n                    style={{\r\n                        minHeight: `${height}px`,\r\n                        backgroundColor: hoveredBackgroundColor && hoveredBackgroundColor,\r\n                    }}>\r\n                    <span className={classes.filter_items_icon}>\r\n                        <MagnifyingGlass color={fontColor} />\r\n                    </span>\r\n                    <input name='search_field'\r\n                        style={{\r\n                            color: fontColor,\r\n                        }}\r\n                        className={classes.filter_items_input}\r\n                        type='text'\r\n                        placeholder='Search...'\r\n                        onChange={handleFilter} />\r\n                </div> : null}\r\n            <div className={classes.dropdown_options}\r\n                style={{\r\n                    minHeight: `${height * 6}px`,\r\n                    backgroundColor: backgroundColor && backgroundColor,\r\n                }}>\r\n                {newList.map((item, index) => {\r\n                    return <ListItem key={item.name ? item.name : index}\r\n                        item={item}\r\n                        index={index}\r\n                        height={height}\r\n                        backgroundColor={backgroundColor}\r\n                        hoveredBackgroundColor={hoveredBackgroundColor}\r\n                        fontColor={fontColor}\r\n                        hoveredFontColor={hoveredFontColor}\r\n                        handleClick={handleClick} />\r\n                })}\r\n                {/* {newList.map((item) => {\r\n                    return item.abbreviation ?\r\n                        <span key={item.name} className={classes.dropdown_option} value={item.abbreviation} style={{ minHeight: `${height}px` }} onClick={() => handleClick(item.name, item.abbreviation)}>{item.name}</span> :\r\n                        <span key={item.name} className={classes.dropdown_option} value={item.name} onClick={() => handleClick(item.name)}>{item.name}</span>\r\n                })} */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nNormalBox.propTypes = {\r\n    list: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            abbreviation: PropTypes.string,\r\n        })\r\n    ).isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    backgroundColor: PropTypes.string,\r\n    hoveredBackgroundColor: PropTypes.string,\r\n    fontColor: PropTypes.string,\r\n    hoveredFontColor: PropTypes.string,\r\n    handleClick: PropTypes.func.isRequired,\r\n    searchBar: PropTypes.bool\r\n}\r\n\r\nexport default NormalBox;"],
  "mappings": ";;;;;;;;;;;;AAAA,IAAAA,gBAAmD;AAEnD,IAAAC,qBAAsB;AADtB,OAAOC,cAAa;;;ACDpB,mBAAkB;AAClB,wBAAsB;AAEtB,SAAS,cAAc,EAAE,WAAW,MAAO,GAAG;AAC1C,SACI,aAAAC,QAAA,cAAC,SAAI,MAAM,OAAO,OAAM,8BAA6B,SAAQ,OAAM,SAAQ,eAAc,kBAAiB,mBAAkB,OAAO,EAAC,WAAsB,YAAY,sBAAqB,KACvL,aAAAA,QAAA,cAAC,WACG,aAAAA,QAAA,cAAC,UAAK,GAAE,+LAA8L,CAC1M,CACJ;AAER;AAEA,cAAc,YAAY;AAAA,EACtB,WAAW,kBAAAC,QAAU;AAAA,EACrB,OAAO,kBAAAA,QAAU;AACrB;AAEA,IAAO,wBAAQ;;;AClBf,IAAAC,gBAAgC;AAEhC,IAAAC,qBAAsB;AADtB,OAAOC,cAAa;;;ACDpB,IAAAC,gBAAkB;AAClB,IAAAC,qBAAsB;AAEtB,SAAS,gBAAgB,EAAE,MAAM,GAAG;AAChC,SACI,cAAAC,QAAA;AAAA,IAAC;AAAA;AAAA,MACD,OAAM;AAAA,MACN,YAAW;AAAA,MACX,SAAQ;AAAA,MACR,IAAG;AAAA,MAAS,GAAE;AAAA,MAAM,GAAE;AAAA,MACtB,OAAM;AAAA,MACN,QAAO;AAAA,MACP,MAAO,QAAQ,QAAQ;AAAA,MACvB,SAAQ;AAAA,MACR,kBAAiB;AAAA,MACjB,UAAS;AAAA;AAAA,IACL,cAAAA,QAAA,cAAC,WACG,cAAAA,QAAA,cAAC,UAAK,GAAE,onCAAmnC,CAC/nC;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,IACA,cAAAA,QAAA,cAAC,SACD;AAAA,EACJ;AAER;AAEA,gBAAgB,YAAY;AAAA,EACxB,OAAO,mBAAAC,QAAU;AACrB;AAEA,IAAO,0BAAQ;;;ACxDR,SAAS,eAAe,eAAe,MAAM;AAChD,MAAI,SAAS,CAAC;AACd,MAAG,cAAc,WAAW,GAAE;AAC1B,WAAO;AAAA,EACX;AACA,OAAK,IAAI,CAAC,SAAS;AACf,QAAI,QAAQ;AACZ,UAAM,QAAQ,OAAO,OAAO,IAAI,EAAE,SAAS;AAC3C,kBAAc,IAAI,CAAC,SAAS;AACxB,UAAI,MAAM,YAAY,EAAE,KAAK,EAAE,SAAS,KAAK,YAAY,EAAE,KAAK,CAAC,GAAG;AAChE;AAAA,MACJ;AACA,UAAI,UAAU,cAAc,QAAQ;AAChC,eAAO,KAAK,IAAI;AAAA,MACpB;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACD,SAAO;AACX;;;ACnBA,IAAAC,gBAAgC;AAEhC,IAAAC,qBAAsB;AADtB,OAAO,aAAa;AAqBpB,SAAS,SAAS,EAAE,MAAM,OAAO,QAAQ,YAAY,iBAAiB,wBAAwB,WAAW,kBAAkB,YAAY,GAAG;AAEtI,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,KAAK;AAChD,SACI,KAAK,eACD,cAAAC,QAAA;AAAA,IAAC;AAAA;AAAA,MAAK,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,MAC/B,WAAW,QAAQ;AAAA,MACnB,OAAO,KAAK,eAAe,KAAK,eAAe;AAAA,MAC/C,OAAO;AAAA,QACH,WAAW,GAAG,MAAM;AAAA,QAAM,YAAY,cAAc;AAAA,QACpD,iBAAiB,YAAY,0BAA0B,yBAAyB,mBAAmB;AAAA,QACnG,OAAO,YAAY,oBAAoB,mBAAmB,aAAa;AAAA,MAC3E;AAAA,MACA,SAAS,MAAM,YAAY,KAAK,OAAO,KAAK,OAAO,MAAM,KAAK,YAAY;AAAA,MAC1E,cAAc,MAAM,aAAa,IAAI;AAAA,MACrC,cAAc,MAAM,aAAa,KAAK;AAAA;AAAA,IAErC,KAAK,OAAO,KAAK,OAAO;AAAA,EAC7B,IACA,cAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MAAK,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,MAC/B,WAAW,QAAQ;AAAA,MACnB,OAAO,KAAK,OAAO,KAAK,OAAO;AAAA,MAC/B,OAAO;AAAA,QACH,WAAW,GAAG,MAAM;AAAA,QAAM,YAAY,cAAc;AAAA,QACpD,iBAAiB,YAAY,0BAA0B,yBAAyB,mBAAmB;AAAA,QACnG,OAAO,YAAY,oBAAoB,mBAAmB,aAAa;AAAA,MAC3E;AAAA,MACA,SAAS,MAAM,YAAY,KAAK,OAAO,KAAK,OAAO,IAAI;AAAA,MACvD,cAAc,MAAM,aAAa,IAAI;AAAA,MACrC,cAAc,MAAM,aAAa,KAAK;AAAA;AAAA,IACrC,KAAK,OAAO,KAAK,OAAO;AAAA,EAC7B;AAGZ;AAEA,SAAS,YAAY;AAAA,EACjB,MAAM,mBAAAC,QAAU,UAAU;AAAA,IACtB,mBAAAA,QAAU,MAAM;AAAA,MACZ,MAAM,mBAAAA,QAAU,OAAO;AAAA,MACvB,cAAc,mBAAAA,QAAU;AAAA,IAC5B,CAAC;AAAA,IACD,mBAAAA,QAAU,OAAO;AAAA,IACjB,mBAAAA,QAAU,OAAO;AAAA,EACrB,CAAC,EAAE;AAAA,EACH,OAAO,mBAAAA,QAAU,OAAO;AAAA,EACxB,QAAQ,mBAAAA,QAAU,OAAO;AAAA,EACzB,YAAY,mBAAAA,QAAU;AAAA,EACtB,iBAAiB,mBAAAA,QAAU;AAAA,EAC3B,wBAAwB,mBAAAA,QAAU;AAAA,EAClC,WAAW,mBAAAA,QAAU;AAAA,EACrB,kBAAkB,mBAAAA,QAAU;AAAA,EAC5B,aAAa,mBAAAA,QAAU,KAAK;AAChC;AAEA,IAAO,mBAAQ;;;AHpDf,SAAS,aAAa,EAAE,MAAM,QAAQ,iBAAiB,wBAAwB,WAAW,kBAAkB,YAAY,aAAa,UAAU,GAAG;AAE9I,QAAM,CAAC,SAAS,UAAU,QAAI,wBAAS,IAAI;AAG3C,WAAS,aAAa,OAAO;AACzB,UAAM,WAAW,MAAM,OAAO,MAAM,MAAM,OAAO,EAAE,OAAO,UAAQ,SAAS,EAAE;AAC7E,UAAM,cAAc,eAAe,UAAU,IAAI;AACjD,eAAW,WAAW;AAAA,EAC1B;AAEA,SACI,cAAAC,QAAA;AAAA,IAAC;AAAA;AAAA,MAAI,WAAWC,SAAQ;AAAA,MACpB,OAAO,EAAE,WAAW,GAAG,SAAS,CAAC,MAAM,WAAW,cAAc,SAAS,CAAC,OAAO,OAAO,IAAI;AAAA;AAAA,IAC5F,cAAAD,QAAA;AAAA,MAAC;AAAA;AAAA,QAAI,WAAWC,SAAQ;AAAA,QACpB,OAAO;AAAA,UACH,OAAO;AAAA,UACP;AAAA,QACJ;AAAA;AAAA,MACC,cAAc,OACX,cAAAD,QAAA,cAAC,SAAI,WAAWC,SAAQ,cAAc,OAAO,EAAE,WAAW,GAAG,MAAM,MAAM,iBAAiB,0BAA0B,uBAAuB,KACvI,cAAAD,QAAA,cAAC,UAAK,WAAWC,SAAQ,qBACrB,cAAAD,QAAA,cAAC,6BAAgB,CACrB,GACA,cAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UAAM,MAAK;AAAA,UACZ,OAAO;AAAA,YACH,OAAO;AAAA,UACX;AAAA,UACA,WAAWC,SAAQ;AAAA,UACnB,MAAK;AAAA,UACL,aAAY;AAAA,UACZ,UAAU;AAAA;AAAA,MAAc,CAC5B,IAAS;AAAA,MACb,cAAAD,QAAA;AAAA,QAAC;AAAA;AAAA,UAAI,WAAWC,SAAQ;AAAA,UACpB,OAAO;AAAA,YACH,WAAW,GAAG,SAAS,CAAC;AAAA,YACxB;AAAA,UACJ;AAAA;AAAA,QACC,QAAQ,IAAI,CAAC,MAAM,UAAU;AAC1B,iBAAO,cAAAD,QAAA;AAAA,YAAC;AAAA;AAAA,cAAS,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,cAC1C;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA;AAAA,UAA0B;AAAA,QAClC,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAER;AAEA,aAAa,YAAY;AAAA,EACrB,MAAM,mBAAAE,QAAU;AAAA,IACZ,mBAAAA,QAAU,UAAU;AAAA,MAChB,mBAAAA,QAAU,MAAM;AAAA,QACZ,MAAM,mBAAAA,QAAU,OAAO;AAAA,QACvB,cAAc,mBAAAA,QAAU;AAAA,MAC5B,CAAC;AAAA,MACD,mBAAAA,QAAU;AAAA,MACV,mBAAAA,QAAU;AAAA,IACd,CAAC;AAAA,EACL,EAAE;AAAA,EACF,QAAQ,mBAAAA,QAAU,OAAO;AAAA,EACzB,iBAAiB,mBAAAA,QAAU;AAAA,EAC3B,wBAAwB,mBAAAA,QAAU;AAAA,EAClC,WAAW,mBAAAA,QAAU;AAAA,EACrB,kBAAkB,mBAAAA,QAAU;AAAA,EAC5B,YAAY,mBAAAA,QAAU;AAAA,EACtB,aAAa,mBAAAA,QAAU,KAAK;AAAA,EAC5B,WAAW,mBAAAA,QAAU;AACzB;AAEA,IAAO,uBAAQ;;;AItGf,IAAAC,gBAAgC;AAEhC,IAAAC,qBAAsB;AADtB,OAAOC,cAAa;AAOpB,SAAS,UAAU,EAAE,MAAM,QAAQ,iBAAiB,wBAAwB,WAAW,kBAAkB,aAAa,UAAU,GAAG;AAE/H,QAAM,CAAC,SAAS,UAAU,QAAI,wBAAS,IAAI;AAG3C,WAAS,aAAa,OAAO;AACzB,UAAM,WAAW,MAAM,OAAO,MAAM,MAAM,OAAO,EAAE,OAAO,UAAQ,SAAS,EAAE;AAC7E,UAAM,cAAc,eAAe,UAAU,IAAI;AACjD,eAAW,WAAW;AAAA,EAC1B;AAEA,SACI,cAAAC,QAAA;AAAA,IAAC;AAAA;AAAA,MAAI,WAAWC,SAAQ;AAAA,MACpB,OAAO;AAAA,QACH,WAAW,GAAG,SAAS,CAAC;AAAA,QACxB,WAAW,GAAG,SAAS,CAAC;AAAA,QACxB,iBAAiB,mBAAmB;AAAA,MACxC;AAAA;AAAA,IACC,cAAc,OACX,cAAAD,QAAA;AAAA,MAAC;AAAA;AAAA,QAAI,WAAWC,SAAQ;AAAA,QACpB,OAAO;AAAA,UACH,WAAW,GAAG,MAAM;AAAA,UACpB,iBAAiB,0BAA0B;AAAA,QAC/C;AAAA;AAAA,MACA,cAAAD,QAAA,cAAC,UAAK,WAAWC,SAAQ,qBACrB,cAAAD,QAAA,cAAC,2BAAgB,OAAO,WAAW,CACvC;AAAA,MACA,cAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UAAM,MAAK;AAAA,UACR,OAAO;AAAA,YACH,OAAO;AAAA,UACX;AAAA,UACA,WAAWC,SAAQ;AAAA,UACnB,MAAK;AAAA,UACL,aAAY;AAAA,UACZ,UAAU;AAAA;AAAA,MAAc;AAAA,IAChC,IAAS;AAAA,IACb,cAAAD,QAAA;AAAA,MAAC;AAAA;AAAA,QAAI,WAAWC,SAAQ;AAAA,QACpB,OAAO;AAAA,UACH,WAAW,GAAG,SAAS,CAAC;AAAA,UACxB,iBAAiB,mBAAmB;AAAA,QACxC;AAAA;AAAA,MACC,QAAQ,IAAI,CAAC,MAAM,UAAU;AAC1B,eAAO,cAAAD,QAAA;AAAA,UAAC;AAAA;AAAA,YAAS,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,YAC1C;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA;AAAA,QAA0B;AAAA,MAClC,CAAC;AAAA,IAML;AAAA,EACJ;AAER;AAEA,UAAU,YAAY;AAAA,EAClB,MAAM,mBAAAE,QAAU;AAAA,IACZ,mBAAAA,QAAU,MAAM;AAAA,MACZ,MAAM,mBAAAA,QAAU,OAAO;AAAA,MACvB,cAAc,mBAAAA,QAAU;AAAA,IAC5B,CAAC;AAAA,EACL,EAAE;AAAA,EACF,QAAQ,mBAAAA,QAAU,OAAO;AAAA,EACzB,iBAAiB,mBAAAA,QAAU;AAAA,EAC3B,wBAAwB,mBAAAA,QAAU;AAAA,EAClC,WAAW,mBAAAA,QAAU;AAAA,EACrB,kBAAkB,mBAAAA,QAAU;AAAA,EAC5B,aAAa,mBAAAA,QAAU,KAAK;AAAA,EAC5B,WAAW,mBAAAA,QAAU;AACzB;AAEA,IAAO,oBAAQ;;;ANjDf,SAAS,SAAS,EAAE,MAAM,OAAO,MAAM,UAAU,cAAc,WAAW,cAAc,aAAa,UAAU,QAAQ,UAAU,YAAY,mBAAmB,iBAAiB,wBAAwB,WAAW,kBAAkB,YAAY,mBAAmB,eAAc,GAAG;AAElR,QAAM,CAAC,QAAQ,SAAS,QAAI,wBAAS,KAAK;AAC1C,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,KAAK;AAChD,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,wBAAS,QAAQ;AAC7D,QAAM,CAAC,cAAc,eAAe,IAAI,kBAAc,wBAAS,WAAW,QAAI,wBAAS,eAAe,eAAe,EAAE;AACvH,QAAM,CAAC,eAAe,gBAAgB,IAAI,mBAAe,wBAAS,YAAY,QAAI,wBAAS,EAAE;AAC7F,QAAM,mBAAe,sBAAO,IAAI;AAIhC,WAAS,mBAAmB,OAAO;AAC/B,QAAI,UAAU,aAAa,WAAW,CAAC,aAAa,QAAQ,SAAS,MAAM,MAAM,GAAG;AAChF,UAAI,mBAAmB,UAAU;AAC7B,oBAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AAEA,+BAAU,MAAM;AACZ,aAAS,iBAAiB,SAAS,kBAAkB;AACrD,WAAO,MAAM;AACT,eAAS,oBAAoB,SAAS,kBAAkB;AAAA,IAC5D;AAAA,EACJ,GAAG,CAAC,QAAQ,cAAc,CAAC;AAI3B,+BAAU,MAAM;AACZ,gBAAY,SAAS,aAAa;AAAA,EACtC,GAAG,CAAC,aAAa,CAAC;AAGlB,WAAS,YAAYC,OAAM,OAAO;AAC9B,oBAAgBA,KAAI;AACpB,QAAI,OAAO;AACP,uBAAiB,KAAK;AAAA,IAC1B,WAAW,CAAC,OAAO;AACf,uBAAiBA,KAAI;AAAA,IACzB;AACA,gBAAY;AAAA,EAChB;AAEA,WAAS,cAAc;AACnB,sBAAkB,SAAS;AAC3B,cAAU,KAAK;AACf,eAAW,MAAM;AACb,wBAAkB,QAAQ;AAAA,IAC9B,GAAG,GAAG;AAAA,EACV;AAEA,WAAS,aAAa;AAClB,sBAAkB,SAAS;AAC3B,cAAU,IAAI;AACd,eAAW,MAAM;AACb,wBAAkB,QAAQ;AAAA,IAC9B,GAAG,GAAG;AAAA,EACV;AACA,SACI,cAAAC,QAAA;AAAA,IAAC;AAAA;AAAA,MAAI,WAAW,GAAGC,SAAQ,mBAAmB,IAAIA,SAAQ,cAAc,CAAC;AAAA,MACrE,OAAO,EAAE,UAAU,GAAG,QAAQ,KAAK;AAAA,MACnC,cAAc,MAAM,aAAa,IAAI;AAAA,MACrC,cAAc,MAAM,aAAa,KAAK;AAAA;AAAA,IACtC,cAAAD,QAAA;AAAA,MAAC;AAAA;AAAA,QAAM,WAAY,UAAU,iBAAiB,KAAM,GAAGC,SAAQ,KAAK,IAAIA,SAAQ,OAAO,KAAKA,SAAQ;AAAA,QAChG,SAAS;AAAA,QACT,OAAO,EAAC,OAAQ,UAAU,iBAAiB,KAAM,oBAAoB,WAAU;AAAA;AAAA,MAE9E;AAAA,IACL;AAAA,IACA,cAAAD,QAAA,cAAC,WAAM,WAAWC,SAAQ,QAAQ,MAAY,IAAI,MAAM,OAAO,eAAe,UAAU,MAAM;AAAA,IAC9F,cAAAD,QAAA,cAAC,SAAI,OAAO,EAAE,QAAQ,GAAG,MAAM,KAAK,KAChC,cAAAA,QAAA;AAAA,MAAC;AAAA;AAAA,QAAI,KAAK;AAAA,QACN,WAAW,eAAe,GAAGC,SAAQ,kBAAkB,IAAIA,SAAQ,SAAS,KAAK,GAAGA,SAAQ,kBAAkB,IAAIA,SAAQ,MAAM;AAAA,QAChI,OAAO;AAAA,UACH,QAAQ,CAAC,eAAiB,mBAAmB,YAAc,mBAAmB,YAAc,GAAG,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,GAAG,MAAM;AAAA,UACzI,WAAW,aAAa,iBAAiB;AAAA,QAC7C;AAAA;AAAA,MACA,cAAAD,QAAA,cAAC,SAAI,WAAWC,SAAQ,iBAAiB,OAAO,EAAE,WAAW,GAAG,MAAM,KAAK,GAAG,SAAS,MAAM,SAAS,YAAY,IAAI,WAAW,KAC7H,cAAAD,QAAA;AAAA,QAAC;AAAA;AAAA,UAAK,WAAWC,SAAQ;AAAA,UACrB,OAAO,EAAE,OAAO,aAAa,UAAU;AAAA;AAAA,QAAI;AAAA,MAAa,GAC5D,cAAAD,QAAA,cAAC,UAAK,WAAWC,SAAQ,sBAAsB,OAAO,EAAE,kBAAmB,aAAa,WAAW,0BAA2B,uBAAuB,KACjJ,cAAAD,QAAA;AAAA,QAAC;AAAA;AAAA,UAAc,WAAW,SAAS,mBAAmB;AAAA,UAClD,OAAO;AAAA;AAAA,MAAW,CAC1B,CACJ;AAAA,MACE,gBAAgB,SACd,cAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UAAa;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,MAAsB,IAAK;AAAA,MAClC,CAAC,eACE,cAAAA,QAAA;AAAA,QAAC;AAAA;AAAA,UAAU;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,MAAsB,IAAK;AAAA,IACvC,CACJ;AAAA,IACC,WAAW,cAAAA,QAAA,cAAC,OAAE,WAAWC,SAAQ,aAAY,QAAS,IAAO;AAAA,EAClE;AAER;AAEA,SAAS,YAAY;AAAA,EACjB,MAAM,mBAAAC,QAAU;AAAA,IACZ,mBAAAA,QAAU,UAAU;AAAA,MAChB,mBAAAA,QAAU,MAAM;AAAA,QACZ,MAAM,mBAAAA,QAAU,OAAO;AAAA,QACvB,cAAc,mBAAAA,QAAU;AAAA,MAC5B,CAAC;AAAA,MACD,mBAAAA,QAAU;AAAA,MACV,mBAAAA,QAAU;AAAA,IACd,CAAC;AAAA,EACL,EAAE;AAAA,EACF,OAAO,mBAAAA,QAAU,OAAO;AAAA,EACxB,MAAM,mBAAAA,QAAU,OAAO;AAAA,EACvB,UAAU,mBAAAA,QAAU;AAAA,EACpB,aAAa,mBAAAA,QAAU;AAAA,EACvB,QAAQ,mBAAAA,QAAU,OAAO;AAAA,EACzB,UAAU,mBAAAA,QAAU;AAAA,EACpB,YAAY,mBAAAA,QAAU;AAAA,EACtB,mBAAmB,mBAAAA,QAAU;AAAA,EAC7B,iBAAiB,mBAAAA,QAAU;AAAA,EAC3B,wBAAwB,mBAAAA,QAAU;AAAA,EAClC,WAAW,mBAAAA,QAAU;AAAA,EACrB,kBAAkB,mBAAAA,QAAU;AAAA,EAC5B,YAAY,mBAAAA,QAAU;AAAA,EACtB,mBAAmB,mBAAAA,QAAU;AAAA,EAC7B,gBAAgB,mBAAAA,QAAU;AAAA,EAC1B,cAAc,mBAAAA,QAAU,KAAK;AAAA,EAC7B,WAAW,mBAAAA,QAAU;AAAA,EACrB,cAAc,mBAAAA,QAAU,UAAU;AAAA,IAC9B,mBAAAA,QAAU;AAAA,IACV,mBAAAA,QAAU;AAAA,EACd,CAAC;AAAA,EACD,aAAa,mBAAAA,QAAU;AAAA,EACvB,UAAU,mBAAAA,QAAU;AACxB;AAEA,IAAO,mBAAQ;",
  "names": ["import_react", "import_prop_types", "classes", "React", "PropTypes", "import_react", "import_prop_types", "classes", "import_react", "import_prop_types", "React", "PropTypes", "import_react", "import_prop_types", "React", "PropTypes", "React", "classes", "PropTypes", "import_react", "import_prop_types", "classes", "React", "classes", "PropTypes", "name", "React", "classes", "PropTypes"]
}

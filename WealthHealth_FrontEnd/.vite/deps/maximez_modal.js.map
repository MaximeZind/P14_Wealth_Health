{
  "version": 3,
  "sources": ["../../node_modules/maximez_modal/src/Modal.jsx", "../../node_modules/maximez_modal/src/icons/CrossIcon.jsx", "../../node_modules/maximez_modal/src/Span.jsx"],
  "sourcesContent": ["import React from 'react';\r\nimport classes from './styles/Modal.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport CrossIcon from './icons/CrossIcon';\r\nimport Span from './Span';\r\n\r\n/**\r\n * Composant Modal pour afficher une boîte modale personnalisée.\r\n *\r\n * @component\r\n * @param {Object} props - Les propriétés du composant.\r\n * @param {React.ReactNode} props.children - Le contenu de la boîte modale.\r\n * @param {function} [props.closeModal] - Fonction pour fermer la boîte modale.\r\n * @param {number} [props.maxWidth] - La largeur maximale de la boîte modale.\r\n * @param {string} [props.modalBackgroundColor] - La couleur de fond de la boîte modale.\r\n * @param {string} [props.iconColor] - La couleur de l'icône de fermeture.\r\n * @param {string} [props.hoveredIconBackgroundColor] - La couleur de fond de l'icône lorsque survolée.\r\n * @returns {JSX.Element} Le composant Modal rendu.\r\n */\r\n\r\nfunction Modal({ children, closeModal, maxWidth, modalBackgroundColor, iconColor, hoveredIconBackgroundColor }) {\r\n\r\n    return (\r\n        <div className={classes.modal_background}\r\n        style={{\r\n            backgroundColor: modalBackgroundColor === 'rgb(255,255,255)' ? 'rgb(255,255,255, 0.6)' : 'rgb(0,0,0, 0.7)',\r\n        }}>\r\n            <div className={classes.modal}\r\n                style={{\r\n                    maxWidth: maxWidth &&  `${maxWidth}px`,\r\n                    backgroundColor: modalBackgroundColor && modalBackgroundColor,\r\n                }}>\r\n                {closeModal &&\r\n                    <Span borderRadius={'50%'}\r\n                        onClick={closeModal}\r\n                        hoveredBackgroundColor={hoveredIconBackgroundColor}\r\n                        size={40}\r\n                        position={'absolute'}\r\n                        top={10}\r\n                        right={10}\r\n                        zIndex={999}>\r\n                        <CrossIcon color={iconColor} height={25} width={25} />\r\n                    </Span>\r\n                }\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    closeModal: PropTypes.func,\r\n    maxWidth: PropTypes.number,\r\n    modalBackgroundColor: PropTypes.string,\r\n    iconColor: PropTypes.string,\r\n    hoveredIconBackgroundColor: PropTypes.string,\r\n}\r\n\r\nexport default Modal;", "import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction CrossIcon({ color, width, height }) {\r\n    return (\r\n        <svg fill={color} width={width} height={height} xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 11 11\">\r\n            <path d=\"M2.2,1.19l3.3,3.3L8.8,1.2C8.9314,1.0663,9.1127,0.9938,9.3,1C9.6761,1.0243,9.9757,1.3239,10,1.7&#10;&#9;c0.0018,0.1806-0.0705,0.3541-0.2,0.48L6.49,5.5L9.8,8.82C9.9295,8.9459,10.0018,9.1194,10,9.3C9.9757,9.6761,9.6761,9.9757,9.3,10&#10;&#9;c-0.1873,0.0062-0.3686-0.0663-0.5-0.2L5.5,6.51L2.21,9.8c-0.1314,0.1337-0.3127,0.2062-0.5,0.2C1.3265,9.98,1.02,9.6735,1,9.29&#10;&#9;C0.9982,9.1094,1.0705,8.9359,1.2,8.81L4.51,5.5L1.19,2.18C1.0641,2.0524,0.9955,1.8792,1,1.7C1.0243,1.3239,1.3239,1.0243,1.7,1&#10;&#9;C1.8858,0.9912,2.0669,1.06,2.2,1.19z\" />\r\n        </svg>\r\n    );\r\n}\r\n\r\nCrossIcon.propTypes = {\r\n    color: PropTypes.string,\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n}\r\n\r\nexport default CrossIcon;\r\n", "import React from 'react';\r\nimport PropTypes, { oneOfType } from 'prop-types';\r\nimport { useState } from 'react';\r\nimport classes from './styles/Span.module.css';\r\n\r\n/**\r\n * Composant Span pour afficher du texte avec des styles personnalisables.\r\n *\r\n * @component\r\n * @param {Object} props - Les propriétés du composant.\r\n * @param {ReactNode} props.children - Les éléments enfants à afficher dans le composant (peut être du texte ou d'autres composants React).\r\n * @param {string|number} props.text - Le texte à afficher s'il n'y a pas d'enfants.\r\n * @param {function} props.onClick - La fonction à appeler lorsque le composant est cliqué.\r\n * @param {string} props.backgroundColor - La couleur de fond du composant.\r\n * @param {string} props.hoveredBackgroundColor - La couleur de fond lorsque le composant est survolé.\r\n * @param {string} props.fontColor - La couleur du texte.\r\n * @param {string} props.lineHeight - La hauteur de ligne du texte.\r\n * @param {string|number} props.gridColumnStart - L'indice de la colonne de départ dans une grille CSS.\r\n * @param {string|number} props.gridColumnEnd - L'indice de la colonne de fin dans une grille CSS.\r\n * @param {string} props.fontSize - La taille de la police du texte.\r\n * @param {number} props.size - La taille en pixels du composant (hauteur et largeur).\r\n * @param {string} props.borderRadius - Le rayon de bordure du composant.\r\n * @param {number} props.padding - La valeur de marge intérieure du composant.\r\n * @param {string} props.position - La position du composant (par exemple, \"relative\", \"absolute\").\r\n * @param {number} props.top - La position verticale du composant (utilisé avec \"position\" pour le placer en haut).\r\n * @param {number} props.right - La position horizontale du composant (utilisé avec \"position\" pour le placer à droite).\r\n * @param {number} props.zIndex - L'index Z pour le rendu en couches.\r\n * @returns {JSX.Element} Le composant Span rendu.\r\n */\r\n\r\n\r\nfunction Span({ children, text, onClick, backgroundColor, hoveredBackgroundColor, fontColor, lineHeight, gridColumnStart, gridColumnEnd, fontSize, size, borderRadius, padding, position, top, right, zIndex }) {\r\n\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    return (\r\n        <span className={classes.span}\r\n            onClick={onClick}\r\n            style={{\r\n                backgroundColor: isHovered ? (hoveredBackgroundColor && hoveredBackgroundColor) : (backgroundColor && backgroundColor),\r\n                color: fontColor && fontColor,\r\n                lineHeight: lineHeight ? lineHeight : 'normal',\r\n                gridColumnStart: gridColumnStart && gridColumnStart,\r\n                gridColumnEnd: gridColumnEnd && gridColumnEnd,\r\n                fontSize: fontSize && fontSize,\r\n                height: size && `${size}px`,\r\n                width: size && `${size}px`,\r\n                borderRadius: borderRadius && borderRadius,\r\n                paddingLeft: padding && padding,\r\n                paddingRight: padding && padding,\r\n                position: position && position,\r\n                top: top && `${top}px`,\r\n                right: right && `${right}px`,\r\n                zIndex: zIndex && zIndex,\r\n            }}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}>\r\n            {children && children}\r\n            {text && text}\r\n        </span>\r\n\r\n    );\r\n}\r\n\r\nSpan.propTypes = {\r\n    children: PropTypes.node,\r\n    text: oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    onClick: PropTypes.func,\r\n    backgroundColor: PropTypes.string,\r\n    hoveredBackgroundColor: PropTypes.string,\r\n    fontColor: PropTypes.string,\r\n    lineHeight: PropTypes.string,\r\n    gridColumnStart: oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    gridColumnEnd: oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    fontSize: PropTypes.string,\r\n    size: PropTypes.number,\r\n    borderRadius: PropTypes.string,\r\n    padding: PropTypes.number,\r\n    position: PropTypes.string,\r\n    top: PropTypes.number,\r\n    right: PropTypes.number,\r\n    zIndex: PropTypes.number,\r\n}\r\n\r\n\r\nexport default Span;"],
  "mappings": "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",
  "names": ["import_react", "import_prop_types", "classes", "React", "PropTypes", "import_react", "import_prop_types", "React", "PropTypes", "React", "classes", "PropTypes"]
}
